#!/usr/bin/env node

"use strict";
var path = require('path');
var fs = require('fs');

var lib = path.join(path.dirname(fs.realpathSync(__filename)), '../lib/');

var dotenv = require('dotenv');
dotenv.load();

var Kosher = require(lib+'kosher.js').kosher;

var program = require('commander');

program
  .version('0.0.1')
  .usage('[options] [action: sync | config]')
  .option('-v, --verbose', 'Display details about synced features.')
  .option('-l, --list', 'List features.')
  .option('-f, --file <filepath>', 'Config file path [kosher.json]')
  .option('-F, --feature <issue_key>', 'JIRA Feature Issue to sync')
  .option('-S, --scenario <issue_key>', 'JIRA Scenario Issue to sync')
  .option('-P, --project <project_key>', 'JIRA Project to sync')
  .option('-b, --createBranch <scenario_key>', 'Sync a single scneario and create a branch for it')
  .option('-s, --sourceBranch <remote_branch_name>', 'Source branch to create a new branch from')
  .option('-u, --username <jira_username>', 'JIRA Username')
  .option('-p, --password <jira_password>', 'JIRA Password')
  .option('-o, --origin <jira_url>', 'Origin (JIRA Url)')
  .option('-d, --destination <features_path>', 'Destination for generated feature files')
  .parse(process.argv);

if(program.args.length == 0) {
    program.args = ['sync'];
}

var configFilePath = (!!program.file)?program.file:'kosher.json';

// specifier options
if(program.feature) process.env.FEATURE_KEY = program.feature;
if(program.createBranch) {
  process.env.CREATE_BRANCH = true;
  process.env.SCENARIO_KEY = program.createBranch;
}
if(program.scenario) process.env.SCENARIO_KEY = program.scenario;
if(program.username) process.env.JIRA_USERNAME = program.username;
if(program.password) process.env.JIRA_PASSWORD = program.password;

// config override options
if(program.project) process.env.jiraProject = program.project;
if(program.origin) process.env.jiraUrl = program.origin;
if(program.destination) process.env.featuresPath = program.destination;
if(program.sourceBranch) process.env.defaultSourceBranch = program.sourceBranch;

if(process.env.FEATURE_KEY && process.env.SCENARIO_KEY){
  throw('Invalid option pair: You cannot use --feature and --scenario at the same time.');
  return 1;
}

if(process.env.FEATURE_KEY && process.env.CREATE_BRANCH){
  throw(new Error('Invalid option pair: You cannot use --feature and --createBranch at the same time.'));
  return 1;
}

if(process.env.CREATE_BRANCH && !process.env.SCENARIO_KEY){
  throw(new Error('Missing parameter: You must specify a scenario key.'));
  return 1;
}

try {
    switch(program.args[0]) {
        case "config":
        {
            Kosher.config.configure(configFilePath, function(result){
                return result;
            });
            break;
        }
        case "sync":
        {
            Kosher.sync(configFilePath, function(result){
                return result;
            });
            break;
        }
    }
} catch(e) {
    throw(e);
    return 1;
}
